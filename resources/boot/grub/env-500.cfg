source (memdisk)/boot/grub/env-common.cfg

### OPTIONAL

# Enable bootverbose flag
# =======================
# This flags is set whenever `boothowto` has the flag 0x800 enabled.
# Since `boothowto` is hardcoded inside `hammer_time`, we patch the
# corresponding `mov` instruction.
write_dword 0x243341E 0x800 0x800

# Configure gbase trace level
# ===========================
# The GPU driver functions, gbase_*, ocassionally query the `g_tracelevel`
# variable to conditionally print debug information based on the current
# tracing level. This is zero-initialized by default.
write_dword 0x46ACDD0 0x00

# Configure GEOM trace level
# ==========================
# The GEOM driver functions, g_*, ocassionally query the `g_debugflags`
# variable to conditionally print debug information based on the current
# tracing level in g_trace. This is zero-initialized by default.
# This is a flags value where each bit indicates a debug level, which
# seem just { 0x1, 0x2, 0x4 }. Hence 0x7 should enable all output.
write_dword 0x4569700 0x00

# Configure XHCI trace level
# ==========================
# The XHCI driver functions, xhci_*, ocassionally query the `xhcidebug`
# variable to conditionally print debug information based on the current
# tracing level in `xhcidebug`. This is zero-initialized by default.
# The levels go from 0x1 to 0x10 and are checked for higher-equal value.
write_dword 0x4581840 0x00

# Configure USB trace level
# =========================
# The USB driver functions, {hid,usb,usbd}_*, ocassionally query the `usb*_debug`
# variables to conditionally print debug information based on the current tracing
# level stired in them. These are zero-initialized by default.
# These two variables are, in order:
# - usb_debug:       Levels 0x1-to-0xB and checked for higher-equal value.
# - usb_ctrl_debug:  Levels 0x1-to-0x1 and checked for higher-equal value.
# - usb_proc_debug:  Levels 0x1-to-0x1 and checked for higher-equal value.
write_dword 0x3CEB480 0x00
write_dword 0x457E600 0x00
write_dword 0x3CCE828 0x00

### HACKS

# Fix `aeolia_emctimer_read`
# =========================
# The kernel performs multiple reads on the Aeolia EMC timer (clocked at 32.768 KHz),
# until two consecutive reads yield the same timestamp. Unfortunately, while doing
# virtualization, the 30-microsecond window is to small for this to happen, so we
# patch the checks away.
# One explanation for the need of making identical consecutive reads in the drivers,
# is that the underlying timer is connected via an 8-bit bus, so reads in real consoles
# might yield partially updated values.
write_byte 0x25B4CA6 0x90
write_byte 0x25B4CA7 0x90
